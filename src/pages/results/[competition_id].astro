---
import { db, eq, Competition } from 'astro:db';
import Layout from '../../layouts/Layout.astro';
import type { TCompetition } from '../../types/TCompetition';
import type { TCompetitionResults } from '../../types/TCompetitionResults'
import { Competition_Result } from 'astro:db';
import { BOAT_TYPES } from '../../consts/BoatTypes'
import CategoryComponent from '../../components/CategoryComponent.astro';
import { Debug } from 'astro:components';

export const prerender = false
const { competition_id } = Astro.params
const competitionId = parseInt(competition_id);

// TODO: OPTIMIZAR CONSULTAS CON eq
const competitions: TCompetition[] = await db.select().from(Competition)
const [competition] = competitions.filter((competition) => competition.id === competitionId)
const results: TCompetitionResults[] = await db.select().from(Competition_Result)
const filteredResults = results.filter(result => result.competition_id === competitionId); 
const resultsByCategoryAndFinal: {[key: string]: {[key: string]: TCompetitionResults[]}} = filteredResults.reduce((acc, result) => {
  if (!acc[result.category]) {
    acc[result.category] = { semi: [], final: [] }; // Inicializa un objeto para almacenar resultados por categor√≠a y isFinal
  }
  const finalKey = result.isFinal ? 'final' : 'semi';
  acc[result.category][finalKey].push(result);
  return acc;
}, {});
interface CategoryResults {
  true: TCompetitionResults[];
  false: TCompetitionResults[];
}

---
<Layout title={"Competicion"}>
    <section>
    {
    Object.keys(resultsByCategoryAndFinal).map(category => {        
        return <CategoryComponent category={category} results={resultsByCategoryAndFinal[category]}/>
    })
    }
    </section>
</Layout>
